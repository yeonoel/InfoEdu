// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      String   @default("student")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]
}

model School {
  id           Int       @id @default(autoincrement())
  name         String
  type         String?     // privée / publique / semi-publique
  commune      String?     // Cocody, Yopougon, etc.
  stateSupport String?     // Oui / Non / Je ne sais pas
  priceLevel   String?     // Abordable / Moyenne / Trop chère
  logo         String?
  longitude    String?
  latitude     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  filieres     Filiere[]
  reviews      Review[]
}

model Filiere {
  id        Int      @id @default(autoincrement())
  name      String   // Exemple : Informatique, Management
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  Int
  comment   String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  scores    ReviewScore[]
}







































model Criteria {
  id        Int       @id @default(autoincrement())
  label     String    // Exemple : "Cours théoriques", "Cours pratiques", "Cadre étudiant", "Frais"
  icon      String?   // optionnel pour UI
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  scores    ReviewScore[]
}

model ReviewScore {
  id          Int       @id @default(autoincrement())
  review      Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId    Int
  criteria    Criteria  @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  criteriaId  Int
  value       String    // "Très bien" / "Bien" / "Moyen" / "Mauvais"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([reviewId, criteriaId])
}